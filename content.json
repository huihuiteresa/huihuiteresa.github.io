[{"title":"添加log4net日志","date":"2020-08-31T13:22:10.191Z","path":"WebApi/log4net/","text":"ASP.NET 日志相关工具类LoggerHelper.cs 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162using System;using System.Collections.Generic;using System.Linq;using System.Web; namespace RTVSApiFD.Logs&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 日志帮助类 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public class LoggerHelper &#123; private static readonly log4net.ILog LogInfo &#x3D; log4net.LogManager.GetLogger(&quot;LogInfo&quot;); private static readonly log4net.ILog LogError &#x3D; log4net.LogManager.GetLogger(&quot;LogError&quot;); private static readonly log4net.ILog LogMonitor &#x3D; log4net.LogManager.GetLogger(&quot;LogMonitor&quot;); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 记录Error日志 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;errorMsg&quot;&gt;&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;ex&quot;&gt;&lt;&#x2F;param&gt; public static void Error(string errorMsg, Exception ex &#x3D; null) &#123; if (ex !&#x3D; null) &#123; LogError.Error(errorMsg, ex); &#125; else &#123; LogError.Error(errorMsg); &#125; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 记录Info日志 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;ex&quot;&gt;&lt;&#x2F;param&gt; public static void Info(string msg, Exception ex &#x3D; null) &#123; if (ex !&#x3D; null) &#123; LogInfo.Info(msg, ex); &#125; else &#123; LogInfo.Info(msg); &#125; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 记录Monitor日志 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;param&gt; public static void Monitor(string msg) &#123; LogMonitor.Info(msg); &#125; &#125;&#125; MonitorLog.cs 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144using System;using System.Collections.Generic;using System.Collections.Specialized;using System.Diagnostics;using System.Linq;using System.Web; namespace RTVSApiFD.Logs&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 监控日志对象 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public class MonitorLog &#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 构造函数 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public MonitorLog() &#123; this.Watch &#x3D; new Stopwatch(); this.Watch.Start(); &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 监控类型 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public enum MonitorType &#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; Action &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; Action &#x3D; 1, &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 视图 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; View &#x3D; 2 &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public string ControllerName &#123; get; set; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public string ActionName &#123; get; set; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public Stopwatch Watch &#123; get; set; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public DateTime ExecuteStartTime &#123; get; set; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public DateTime ExecuteEndTime &#123; get; set; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; Form 表单数据 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public NameValueCollection FormCollections &#123; get; set; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; URL 参数 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public NameValueCollection QueryCollections &#123; get; set; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 文本流 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public string Raw &#123; get; set; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 获取监控指标日志 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;mtype&quot;&gt;&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt; public string GetLogInfo(MonitorType mtype &#x3D; MonitorType.Action) &#123; this.Watch.Stop(); string actionView &#x3D; &quot;Action执行时间监控：&quot;; string action &#x3D; &quot;Action&quot;; if (mtype &#x3D;&#x3D; MonitorType.View) &#123; actionView &#x3D; &quot;View视图生成时间监控：&quot;; action &#x3D; &quot;View&quot;; &#125; string msgContent &#x3D; string.Format(@&quot;&#123;0&#125;ControllerName：&#123;1&#125;Controller &#123;2&#125;Name:&#123;3&#125; 开始时间：&#123;4&#125; 结束时间：&#123;5&#125; 总 时 间：&#123;6&#125;秒&quot;, actionView, this.ControllerName, action, this.ActionName, this.ExecuteStartTime, this.ExecuteEndTime, this.Watch.ElapsedMilliseconds); if (!string.IsNullOrEmpty(this.Raw)) &#123; msgContent +&#x3D; @&quot; Raw：&quot; + this.Raw; &#125; else if (this.FormCollections !&#x3D; null) &#123; msgContent +&#x3D; @&quot; Form：&quot; + this.GetCollections(this.FormCollections); &#125; else if (this.QueryCollections !&#x3D; null) &#123; msgContent +&#x3D; @&quot; Query：&quot; + this.GetCollections(this.QueryCollections); &#125; return msgContent; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 获取Post 或Get 参数 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;collections&quot;&gt;&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt; public string GetCollections(NameValueCollection collections) &#123; string parameters &#x3D; string.Empty; if (collections &#x3D;&#x3D; null || collections.Count &#x3D;&#x3D; 0) &#123; return parameters; &#125; parameters &#x3D; collections.Keys.Cast&lt;string&gt;() .Aggregate(parameters, (current, key) &#x3D;&gt; current + string.Format(&quot;&#123;0&#125;&#x3D;&#123;1&#125;&amp;&quot;, key, collections[key])); if (!string.IsNullOrWhiteSpace(parameters) &amp;&amp; parameters.EndsWith(&quot;&amp;&quot;)) &#123; parameters &#x3D; parameters.Substring(0, parameters.Length - 1); &#125; return parameters; &#125; &#125; &#125; TrackerFilter.cs 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102using System;using System.Globalization;using System.Web.Mvc; namespace RTVSApiFD.Logs&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 跟踪过滤器 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple &#x3D; false)] public class TrackerFilter : System.Web.Mvc.ActionFilterAttribute,System.Web.Mvc.IActionFilter,System.Web.Mvc.IResultFilter,System.Web.Mvc.IExceptionFilter &#123; private readonly string key &#x3D; &quot;_thisOnActionMonitorLog_&quot;; #region Action时间监控 &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnActionExecuting &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public override void OnActionExecuting(ActionExecutingContext filterContext) &#123; MonitorLog monLog &#x3D; new MonitorLog(); monLog.ExecuteStartTime &#x3D; Convert.ToDateTime(DateTime.Now.ToString(&quot;yyyy&#x2F;MM&#x2F;dd HH:mm:ss.ffff&quot;, DateTimeFormatInfo.InvariantInfo)); monLog.ControllerName &#x3D; filterContext.RouteData.Values[&quot;controller&quot;] as string; monLog.ActionName &#x3D; filterContext.RouteData.Values[&quot;action&quot;] as string; filterContext.Controller.ViewData[this.key] &#x3D; monLog; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnActionExecuted &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public override void OnActionExecuted(ActionExecutedContext filterContext) &#123; MonitorLog monLog &#x3D; filterContext.Controller.ViewData[this.key] as MonitorLog; monLog.ExecuteEndTime &#x3D; DateTime.Now; monLog.FormCollections &#x3D; filterContext.HttpContext.Request.Form;&#x2F;&#x2F;form表单提交的数据 monLog.QueryCollections &#x3D; filterContext.HttpContext.Request.QueryString;&#x2F;&#x2F;Url 参数 LoggerHelper.Monitor(monLog.GetLogInfo()); &#125; #endregion #region View 视图生成时间监控 &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnResultExecuting &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public override void OnResultExecuting(ResultExecutingContext filterContext) &#123; MonitorLog monLog &#x3D; filterContext.Controller.ViewData[this.key] as MonitorLog; monLog.ExecuteStartTime &#x3D; DateTime.Now; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnResultExecuted &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public override void OnResultExecuted(ResultExecutedContext filterContext) &#123; MonitorLog monLog &#x3D; filterContext.Controller.ViewData[this.key] as MonitorLog; monLog.ExecuteEndTime &#x3D; DateTime.Now; LoggerHelper.Monitor(monLog.GetLogInfo(MonitorLog.MonitorType.View)); filterContext.Controller.ViewData.Remove(this.key); &#125; #endregion #region 错误日志 &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnException &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public void OnException(ExceptionContext filterContext) &#123; if (!filterContext.ExceptionHandled) &#123; string controllerName &#x3D; string.Format(&quot;&#123;0&#125;Controller&quot;, filterContext.RouteData.Values[&quot;controller&quot;] as string); string actionName &#x3D; filterContext.RouteData.Values[&quot;action&quot;] as string; string errorMsg &#x3D; string.Format(&quot;在执行 controller[&#123;0&#125;] 的 action[&#123;1&#125;] 时产生异常&quot;, controllerName, actionName); LoggerHelper.Error(errorMsg, filterContext.Exception); &#125; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnAuthorization &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public void OnAuthorization(AuthorizationContext filterContext) &#123; 这个方法是在Action执行之前调用 &#x2F;&#x2F;var user &#x3D; filterContext.HttpContext.Session[&quot;userName&quot;]; &#x2F;&#x2F;if (user &#x3D;&#x3D; null) &#x2F;&#x2F;&#123; &#x2F;&#x2F; &#x2F;&#x2F;filterConetext.HttpContext.Response.Redirect(&quot;&#x2F;Login&#x2F;index&quot;); &#x2F;&#x2F; var url &#x3D; new UrlHelper(filterContext.RequestContext); &#x2F;&#x2F; var urls &#x3D; url.Action(&quot;Index&quot;, &quot;Login&quot;); &#x2F;&#x2F; filterContext.Result &#x3D; new RedirectResult(urls); &#x2F;&#x2F;&#125; &#125; #endregion &#125;&#125; ApiTrackerFilter.cs 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102using System;using System.Globalization;using System.Web.Mvc; namespace RTVSApiFD.Logs&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; API过滤器 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple &#x3D; false)] public class ApiTrackerFilter : System.Web.Mvc.ActionFilterAttribute, System.Web.Mvc.IActionFilter, System.Web.Mvc.IResultFilter, System.Web.Http.Filters.IFilter &#123; private readonly string key &#x3D; &quot;_thisOnApiActionMonitorLog_&quot;; #region Action时间监控 &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnActionExecuting &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public override void OnActionExecuting(ActionExecutingContext filterContext) &#123; MonitorLog monLog &#x3D; new MonitorLog(); monLog.ExecuteStartTime &#x3D; Convert.ToDateTime(DateTime.Now.ToString(&quot;yyyy&#x2F;MM&#x2F;dd HH:mm:ss.ffff&quot;, DateTimeFormatInfo.InvariantInfo)); monLog.ControllerName &#x3D; filterContext.RouteData.Values[&quot;controller&quot;] as string; monLog.ActionName &#x3D; filterContext.RouteData.Values[&quot;action&quot;] as string; filterContext.Controller.ViewData[this.key] &#x3D; monLog; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnActionExecuted &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public override void OnActionExecuted(ActionExecutedContext filterContext) &#123; MonitorLog monLog &#x3D; filterContext.Controller.ViewData[this.key] as MonitorLog; monLog.ExecuteEndTime &#x3D; DateTime.Now; monLog.FormCollections &#x3D; filterContext.HttpContext.Request.Form;&#x2F;&#x2F;form表单提交的数据 monLog.QueryCollections &#x3D; filterContext.HttpContext.Request.QueryString;&#x2F;&#x2F;Url 参数 LoggerHelper.Monitor(monLog.GetLogInfo()); &#125; #endregion #region View 视图生成时间监控 &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnResultExecuting &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public override void OnResultExecuting(ResultExecutingContext filterContext) &#123; MonitorLog monLog &#x3D; filterContext.Controller.ViewData[this.key] as MonitorLog; monLog.ExecuteStartTime &#x3D; DateTime.Now; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnResultExecuted &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public override void OnResultExecuted(ResultExecutedContext filterContext) &#123; MonitorLog monLog &#x3D; filterContext.Controller.ViewData[this.key] as MonitorLog; monLog.ExecuteEndTime &#x3D; DateTime.Now; LoggerHelper.Monitor(monLog.GetLogInfo(MonitorLog.MonitorType.View)); filterContext.Controller.ViewData.Remove(this.key); &#125; #endregion #region 错误日志 &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnException &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public void OnException(ExceptionContext filterContext) &#123; if (!filterContext.ExceptionHandled) &#123; string controllerName &#x3D; string.Format(&quot;&#123;0&#125;Controller&quot;, filterContext.RouteData.Values[&quot;controller&quot;] as string); string actionName &#x3D; filterContext.RouteData.Values[&quot;action&quot;] as string; string errorMsg &#x3D; string.Format(&quot;在执行 controller[&#123;0&#125;] 的 action[&#123;1&#125;] 时产生异常&quot;, controllerName, actionName); LoggerHelper.Error(errorMsg, filterContext.Exception); &#125; &#125; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; OnAuthorization &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filterContext&quot;&gt;&lt;&#x2F;param&gt; public void OnAuthorization(AuthorizationContext filterContext) &#123; 这个方法是在Action执行之前调用 &#x2F;&#x2F;var user &#x3D; filterContext.HttpContext.Session[&quot;userName&quot;]; &#x2F;&#x2F;if (user &#x3D;&#x3D; null) &#x2F;&#x2F;&#123; &#x2F;&#x2F; &#x2F;&#x2F;filterConetext.HttpContext.Response.Redirect(&quot;&#x2F;Login&#x2F;index&quot;); &#x2F;&#x2F; var url &#x3D; new UrlHelper(filterContext.RequestContext); &#x2F;&#x2F; var urls &#x3D; url.Action(&quot;Index&quot;, &quot;Login&quot;); &#x2F;&#x2F; filterContext.Result &#x3D; new RedirectResult(urls); &#x2F;&#x2F;&#125; &#125; #endregion &#125;&#125; ASP.NET相关设置在Global.asax文件中添加读取日志的配置 123456789101112131415161718192021222324252627282930313233343536373839404142using JT1078Server;using log4net.Config;using RedisHelp;using System.Web.Http;using System.Web.Mvc;using System.Web.Optimization;using System.Web.Routing; namespace RTVSApiFD&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 全局启动类 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public class WebApiApplication : System.Web.HttpApplication &#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; Redis帮助类初始化 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public static RedisHelper RedisHelper &#x3D; new RedisHelper(); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 音视频服务 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public static Task TaskService &#x3D; new Task(); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 启动web程序 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; protected void Application_Start() &#123; AreaRegistration.RegisterAllAreas(); GlobalConfiguration.Configure(WebApiConfig.Register); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles); &#x2F;&#x2F;应用程序启动时，自动加载配置log4Net log4net.Config.XmlConfigurator.Configure(); GlobalConfiguration.Configuration.Filters.Add(new Logs.ApiTrackerFilter()); &#125; &#125;&#125; 此时还需要修改FilterConfig类，添加注册过滤器： 12345678910111213141516171819202122232425using System.Web;using System.Web.Mvc; namespace RTVSApiFD&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 过滤器配置 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; public class FilterConfig &#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 注册全局过滤器 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;filters&quot;&gt;&lt;&#x2F;param&gt; public static void RegisterGlobalFilters(GlobalFilterCollection filters) &#123; &#x2F;&#x2F;API日志 filters.Add(new Logs.ApiTrackerFilter()); &#x2F;&#x2F;监控日志 filters.Add(new Logs.TrackerFilter()); filters.Add(new HandleErrorAttribute()); &#125; &#125;&#125; 修改web.config文件加入日志配置： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;configuration&gt; &lt;configSections&gt; &lt;section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler,log4net\" /&gt; &lt;/configSections&gt; &lt;log4net&gt; &lt;!--错误日志--&gt; &lt;appender name=\"RollingLogFileAppender\" type=\"log4net.Appender.RollingFileAppender\"&gt; &lt;file value=\"log\\\\LogError\\\\\" /&gt; &lt;appendToFile value=\"true\" /&gt; &lt;rollingStyle value=\"Date\" /&gt; &lt;datePattern value=\"yyyy\\\\yyyyMM\\\\yyyyMMdd'.txt'\" /&gt; &lt;staticLogFileName value=\"false\" /&gt; &lt;param name=\"MaxSizeRollBackups\" value=\"100\" /&gt; &lt;layout type=\"log4net.Layout.PatternLayout\"&gt; &lt;!--每条日志末尾的文字说明--&gt; &lt;!--输出格式--&gt; &lt;!--样例：2008-03-26 13:42:32,111 [10] INFO Log4NetDemo.MainClass [(null)] - info--&gt; &lt;conversionPattern value=\"%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别： %-5level %n错误描述：%message%newline %n\" /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!--Info日志--&gt; &lt;appender name=\"InfoAppender\" type=\"log4net.Appender.RollingFileAppender\"&gt; &lt;param name=\"File\" value=\"Log\\\\LogInfo\\\\\" /&gt; &lt;param name=\"AppendToFile\" value=\"true\" /&gt; &lt;param name=\"MaxFileSize\" value=\"10240\" /&gt; &lt;param name=\"MaxSizeRollBackups\" value=\"100\" /&gt; &lt;param name=\"StaticLogFileName\" value=\"false\" /&gt; &lt;param name=\"DatePattern\" value=\"yyyy\\\\yyyyMM\\\\yyyyMMdd'.txt'\" /&gt; &lt;param name=\"RollingStyle\" value=\"Date\" /&gt; &lt;layout type=\"log4net.Layout.PatternLayout\"&gt; &lt;conversionPattern value=\"%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别： %-5level %n日志描述：%message%newline %n\" /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!--监控日志--&gt; &lt;appender name=\"MonitorAppender\" type=\"log4net.Appender.RollingFileAppender\"&gt; &lt;param name=\"File\" value=\"Log\\\\LogMonitor\\\\\" /&gt; &lt;param name=\"AppendToFile\" value=\"true\" /&gt; &lt;param name=\"MaxFileSize\" value=\"10240\" /&gt; &lt;param name=\"MaxSizeRollBackups\" value=\"100\" /&gt; &lt;param name=\"StaticLogFileName\" value=\"false\" /&gt; &lt;param name=\"DatePattern\" value=\"yyyy\\\\yyyyMM\\\\yyyyMMdd'.txt'\" /&gt; &lt;param name=\"RollingStyle\" value=\"Date\" /&gt; &lt;layout type=\"log4net.Layout.PatternLayout\"&gt; &lt;conversionPattern value=\"%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别： %-5level %n跟踪描述：%message%newline %n\" /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!--Error日志--&gt; &lt;logger name=\"LogError\"&gt; &lt;level value=\"ERROR\" /&gt; &lt;appender-ref ref=\"RollingLogFileAppender\" /&gt; &lt;/logger&gt; &lt;!--Info日志--&gt; &lt;logger name=\"LogInfo\"&gt; &lt;level value=\"INFO\" /&gt; &lt;appender-ref ref=\"InfoAppender\" /&gt; &lt;/logger&gt; &lt;!--监控日志--&gt; &lt;logger name=\"LogMonitor\"&gt; &lt;level value=\"Monitor\" /&gt; &lt;appender-ref ref=\"MonitorAppender\" /&gt; &lt;/logger&gt; &lt;/log4net&gt; &lt;configuration&gt; 测试ASP.NET日志输出123456789101112131415161718192021222324252627282930[HttpPost] public Result MultiSIMAlarmForJsonParam(FileSourceMultiRequest fileSourceMultiRequest) &#123; Result result &#x3D; null; try &#123; if (fileSourceMultiRequest !&#x3D; null) &#123; LoggerHelper.Monitor(&quot;MultiSIMAlarmForJsonParam:&quot; + fileSourceMultiRequest.ToJson()); LoggerHelper.Info(&quot;MultiSIMAlarmForJsonParam:&quot; + fileSourceMultiRequest.ToJson()); List&lt;AVInfo&gt; list &#x3D; cache.QueryMulti(fileSourceMultiRequest.Sims, fileSourceMultiRequest.Channel, fileSourceMultiRequest.Alarms, fileSourceMultiRequest.StorageType, fileSourceMultiRequest.StreamType, fileSourceMultiRequest.StartTime.DateTimeToUNIX_long(), fileSourceMultiRequest.EndTime.DateTimeToUNIX_long(),fileSourceMultiRequest.DataType); LoggerHelper.Info(&quot;MultiSIMAlarmForJsonParam:list.size&#x3D;&quot; + (list &#x3D;&#x3D; null ? 0 : list.Count)); if (list !&#x3D; null) &#123; result &#x3D; new Result(1, &quot;查询成功!&quot;, list); &#125; else &#123; result &#x3D; new Result(0, &quot;没有查询到结果!&quot;, new List&lt;AVInfo&gt;()); &#125; LoggerHelper.Info(&quot;Result&#x3D;&quot; + result.ToJson()); &#125; &#125; catch (Exception ex) &#123; result &#x3D; new Result(2, &quot;异常:&quot; + ex.Message, new List&lt;AVInfo&gt;()); LoggerHelper.Error(&quot;MultiSIMAlarmForJsonParam异常:&quot; + result.ToJson()); &#125; return result; &#125; 注意需要在AssemblyInfo.cs文件中添加[assembly:log4net.Config.XmlConfigurator(ConfigFile=”log4net.config”,Watch=true)] 转载：https://blog.csdn.net/boonya/article/details/81189754","tags":[{"name":"log4net","slug":"log4net","permalink":"https://huihuiteresa.github.io/tags/log4net/"}]},{"title":"WebAPI全局捕获异常","date":"2020-07-19T14:46:00.000Z","path":"WebAPI/webapiexception/","text":"WebApi异常捕获方法 添加一个类处理: ApiErrorHandler1234567891011121314151617181920212223242526272829303132public class ApiErrorHandler : ExceptionFilterAttribute&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 异常处理 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;context&quot;&gt;&lt;&#x2F;param&gt; public override void OnException(HttpActionExecutedContext context) &#123; HttpResponseMessage response &#x3D; null; if (context.Exception is NotImplementedException) &#123; response &#x3D; new HttpResponseMessage(HttpStatusCode.NotImplemented); &#125; else if (context.Exception is TimeoutException) &#123; response &#x3D; new HttpResponseMessage(HttpStatusCode.RequestTimeout); &#125; else &#123; response &#x3D; new HttpResponseMessage(HttpStatusCode.InternalServerError); &#125; &#x2F;&#x2F;日志记录 LogHelper.Error(context.Exception.ToString()); &#x2F;&#x2F;可以发送邮件通知相关人员网站发生异常了 &#x2F;&#x2F;Helpers.SendEmail(&quot;网站异常(ApiError)&quot;, context.Exception.ToString()); context.Response &#x3D; response; &#125;&#125; ExceptionFilterAttribute 需要添加引用 System.Web.Http HttpResponseMessage 需要添加引用 System.Net.Http.dll 在WebApiConfig内添加如下代码1GlobalConfiguration.Configuration.Filters.Add(new ApiErrorHandler()); 这时候在WebApi内发生的异常都会进入这个方法","tags":[{"name":"WebAPI捕获异常","slug":"WebAPI捕获异常","permalink":"https://huihuiteresa.github.io/tags/WebAPI%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8/"},{"name":".NET捕获异常","slug":"NET捕获异常","permalink":"https://huihuiteresa.github.io/tags/NET%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8/"}]},{"title":"SQLServer行转列","date":"2020-07-01T13:24:20.000Z","path":"SqlServer/rowtocolumn/","text":"建表，添加测试数据12345678910111213141516--删除临时表if object_id(&#39;tempdb..#demo&#39;) is not null drop table #tempCREATE TABLE #demo( row1 NVARCHAR(10), row2 NVARCHAR(10), col NVARCHAR(10), colval NVARCHAR(10));INSERT INTO #demo (row1,row2,col,colval)VALUES( N&#39;huihui&#39;, N&#39;1&#39;,N&#39;语文&#39;, N&#39;1&#39; );INSERT INTO #demo (row1,row2,col,colval)VALUES( N&#39;huihui&#39;, N&#39;1&#39;,N&#39;数学&#39;, N&#39;2&#39; );INSERT INTO #demo (row1,row2,col,colval)VALUES( N&#39;huihui&#39;, N&#39;1&#39;,N&#39;英语&#39;, N&#39;3&#39; );INSERT INTO #demo (row1,row2,col,colval)VALUES( N&#39;huihui&#39;, N&#39;2&#39;,N&#39;英语&#39;, N&#39;3&#39; );INSERT INTO #demo (row1,row2,col,colval)VALUES( N&#39;haha&#39;, N&#39;2&#39;,N&#39;英语&#39;, N&#39;3&#39; ); 行转列sql123456789101112--sqldeclare @col varchar(3000)&#x3D;&#39;&#39;, @selCol VARCHAR(3000)&#x3D;&#39;&#39;,@sql varchar(3000)&#x3D;&#39;&#39;;select @col&#x3D;@col+&#39;,[&#39;+[col]+&#39;]&#39; from (select distinct [col] from #demo) a order by [col];select @selCol&#x3D;@selCol+&#39;,max([&#39;+[col]+&#39;]) as &#39;+&#39;[&#39;+[col]+&#39;]&#39; from (select distinct [col] from #demo) a order by [col];select @col&#x3D;right(@col,len(@col)-1);select @selCol&#x3D;right(@selCol,len(@selCol)-1);set @sql&#x3D;&#39;select row1,row2,&#39;+@selCol+&#39; from( select row1,row2,&#39;+@col +&#39;from #demo a pivot (max(colval) for col in(&#39;+@col+&#39;) ) as pv ) b group by row1,row2&#39;;exec(@sql); 说明需要分组情况，网上找的大部分都是不带group by的，记录下。","tags":[{"name":"行转列","slug":"行转列","permalink":"https://huihuiteresa.github.io/tags/%E8%A1%8C%E8%BD%AC%E5%88%97/"}]},{"title":"设计模式原则","date":"2020-06-22T00:23:16.000Z","path":"designpatterns/principle/","text":"架构中的设计原则单一职责原则：系统中的每一个对象都应该只有一个单独的职责，而所有对象所关注的就是自身职责的完成。 里氏替换原则：在任何父类出现的地方都可以用它的子类来替换。 子类必须完全实现父类的方法 子类可以有自己的特性 覆盖或者实现父类的方法时输入参数可以被放大 覆写或者实现父类的方法时输出结果可以被缩小。 依赖注入原则（依赖反转原则）：要依赖于抽象，不要依赖于具体的实现。 三点说明： 高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口） 抽象（抽象类或接口）不应该依赖于细节（具体实现类） 细节（具体实现类）应该依赖抽象 实现方式： 通过构造函数传递依赖对象 通过setter方法传递依赖对象 接口声明实现依赖对象 接口分离原则：不应该强迫客户程序依赖它们不需要使用的方法。 迪米特原则：一个对象应当对其他对象尽可能少的了解。 开闭原则：一个对象对扩展开放，对修改关闭。 合成复用原则：尽量使用合成/聚合的方式，而不是使用继承。 接口 接口的思想就是“封装隔离” 接口与抽象类的选择 优先使用接口； 在既要定义子类行为，又要为子类提供公共的功能时应选择抽象类；","tags":[{"name":"设计模式原则","slug":"设计模式原则","permalink":"https://huihuiteresa.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/"},{"name":"设计模式","slug":"设计模式","permalink":"https://huihuiteresa.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]}]